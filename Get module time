#include <windows.h>
#include <TlHelp32.h>
#include <stdio.h>
#include <locale.h>
#include <atlstr.h>
#pragma warning(disable:4996)

BOOL SetPrivilege(
    HANDLE hToken,          // access token handle
    LPCTSTR lpszPrivilege,  // name of privilege to enable/disable
    BOOL bEnablePrivilege   // to enable or disable privilege
)
{
    TOKEN_PRIVILEGES tp;
    LUID luid;

    if (!LookupPrivilegeValueW(
        NULL,            // lookup privilege on local system
        lpszPrivilege,   // privilege to lookup 
        &luid))        // receives LUID of privilege
    {
        printf("LookupPrivilegeValue error:  %d\n", GetLastError());
        return FALSE;
    }

    tp.PrivilegeCount = 1;
    tp.Privileges[0].Luid = luid;
    if (bEnablePrivilege)
        tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
    else
        tp.Privileges[0].Attributes = 0;

    // Enable the privilege or disable all privileges.

    if (!AdjustTokenPrivileges(
        hToken,
        FALSE,
        &tp,
        sizeof(TOKEN_PRIVILEGES),
        (PTOKEN_PRIVILEGES)NULL,
        (PDWORD)NULL))
    {
        printf("AdjustTokenPrivileges error: %d\n", GetLastError());
        return FALSE;
    }

    if (GetLastError() == ERROR_NOT_ALL_ASSIGNED)

    {
        printf("The token does not have the specified privilege. \n");
        return FALSE;
    }

    return TRUE;
}


int main()
{
    HANDLE token;

    OpenProcessToken(GetCurrentProcess(), TOKEN_ALL_ACCESS_P, &token);

    SetPrivilege(token, L"SeDebugPrivilege", 1);

    DWORD dwPId = 0;
    DWORD n = 0;
    DWORD y = 0;

    HANDLE pFile;
    DWORD fileSize;
    char* buffer, * tmpBuf;
    DWORD dwBytesRead, dwBytesToRead, tmpLen;

    printf("请输入目标进程ID：");
    scanf_s("%ud", &dwPId);


    printf("请输入需要包括的年份ID：");
    scanf_s("%ud", &n);

    //printf("请输入需要包括的月份ID：");
    //scanf_s("%ud", &y);


    HANDLE        hModuleSnap = INVALID_HANDLE_VALUE;
    MODULEENTRY32 me32 = { sizeof(MODULEENTRY32) };

    hModuleSnap = CreateToolhelp32Snapshot(
        TH32CS_SNAPMODULE,
        dwPId);
    if (hModuleSnap == INVALID_HANDLE_VALUE)
    {
        printf("CreateToolhelp32Snapshot error %d \n",GetLastError());
        return false;
    }

    if (!Module32First(hModuleSnap, &me32)) {
        printf("Module32First error%d \n", GetLastError());
        CloseHandle(hModuleSnap);
        return false;
    }
    WCHAR lpFileName[MAX_PATH];
    wcscpy(lpFileName, (WCHAR*)L"C:\\Windows\\System32\\");
    do {
        wcscpy(lpFileName + wcslen(L"C:\\Windows\\System32\\"), me32.szModule);

        pFile = CreateFileW(lpFileName, GENERIC_READ,
            FILE_SHARE_READ,
            NULL,
            OPEN_EXISTING,
            FILE_ATTRIBUTE_NORMAL,
            NULL);
        if (pFile == (HANDLE)-1)
        {
            continue;
        }

        FILETIME fCreateTime, fAccessTime, fWriteTime, localTime;
        GetFileTime(pFile, &fCreateTime, &fAccessTime, &fWriteTime);

        SYSTEMTIME sysTime;
        FileTimeToLocalFileTime(&fWriteTime, &localTime);
        FileTimeToSystemTime(&localTime, &sysTime);

        CString strTime;
        if (sysTime.wYear==n)
        {
            printf("%S   修改时间%4d年%2d月%2d日\n", lpFileName, sysTime.wYear, sysTime.wMonth, sysTime.wDay);
        }
       
    } while (Module32Next(hModuleSnap, &me32));

    CloseHandle(hModuleSnap);

    return 0;
}
