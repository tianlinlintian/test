//目的：获得当前进程所有可以打开的驱动设备名以及设备连接

//要查看名字所在的驱动可在DeviceIoControl调用之前设置了一个 __debugbreak()断点
//还需要设置cpu为单核，命中 __debugbreak()断点后继续对bp nt!IofCallDriver下断点然后按g放行
//nt!IofCallDriver断下后，一直按t单步跟，跟不了多久就会进入目标驱动的ioctl派遣函数（也就是nt!guard_dispatch_icall消失的时候）,此时如果没有符号可通过基地址对比查看对应驱动

//因为还有部分驱动在IRP_MJ_CREATE派遣函数中也就是在打开设备时进行了了判断,比如WS2IFSL.sys(一个例子是CVE-2019-1215)
//所以为了包含所有可能的结果即使在打开设备时出错但只要不是拒绝访问或者没有设置IRP_MJ_CREATE,设备无效那么就打印错误值 以及设备名，这种情况需要自己去驱动的IRP_MJ_CREATE分析

//关于ioctl定位通过对IofCompleteRequest交叉引用即可

//由于只是获得通信名字，进一步发送ioctl需要拥有权限(https://docs.microsoft.com/en-us/windows-hardware/drivers/storage/acls-and-the-device-stack)
//如果以成功发送ioctl为目的，从方便角度上看，MAXIMUM_ALLOWED改为GENERIC_WRITE | MAXIMUM_ALLOWED是更好的选择

//以管理员权限运行


#include "windows.h"
#include "stdio.h"

#pragma comment(lib,"ntdll.lib")
#pragma warning(disable:4996)
#define STATUS_BUFFER_TOO_SMALL 0xC0000023
#define STATUS_NO_MORE_ENTRIES 0x8000001A


typedef struct _UNICODE_STRING
{
	unsigned short Length;
	unsigned short MaxLength;
	unsigned long Pad;
	wchar_t* Buffer;
}UNICODE_STRING;

typedef struct _OBJECT_ATTRIBUTES {
	ULONGLONG           Length;
	HANDLE          RootDirectory;
	_UNICODE_STRING* ObjectName;
	ULONGLONG           Attributes;
	PVOID           SecurityDescriptor;
	PVOID           SecurityQualityOfService;
} OBJECT_ATTRIBUTES;



extern "C"
{
	int __stdcall ZwOpenDirectoryObject(HANDLE*, int DesiredAccess, _OBJECT_ATTRIBUTES*);
	int __stdcall ZwQueryDirectoryObject(HANDLE, void* Buffer, unsigned long BufferSize, BOOL ReturnSingleEntry, BOOL RestartScan, unsigned long* pContext, unsigned long* pReturnLength);
	int __stdcall ZwOpenSymbolicLinkObject(HANDLE* LinkHandle, int DesiredAccess, _OBJECT_ATTRIBUTES* ObjectAttributes);
	int __stdcall ZwQuerySymbolicLinkObject(HANDLE LinkHandle, _UNICODE_STRING* LinkTarget, unsigned long* ReturnedLength);

	int __stdcall ZwQueryObject(HANDLE, unsigned long Class, void* Buffer, unsigned long BufferSize, unsigned long* pReturnedLength);
	int __stdcall ZwClose(HANDLE);
}

wchar_t* Print_Level(int lvl)
{
	if (!lvl) return (WCHAR*)L"";
	else if (lvl == 1) return (WCHAR*)L"=>";
	else if (lvl == 2) return (WCHAR*)L"==>";

	wchar_t X = '=';

	wchar_t* p = (wchar_t*)LocalAlloc(LMEM_ZEROINIT, (lvl * 2) + 2 + 2); //Never freed, fix later

	int lvl_x = lvl, i = 0;

	while (lvl_x--) p[i++] = X;
	p[i] = '>';
	return p;
}

BOOL ShouldConcat(wchar_t* pStr)
{
	if (!pStr) return FALSE;
	unsigned long Len = wcslen(pStr);
	if (Len)
	{
		if (pStr[Len - 1] == '\\') return FALSE;
	}

	return TRUE;
}
wchar_t Dir_S2[0X1000];

HANDLE hToken;
wchar_t* Dir_S3;
wchar_t* Buffer2 = 0;
INT i = 1;
int z = 0;
int Recur(HANDLE hDirectory, wchar_t* DirName)
{
	unsigned long BufSize = 0;
	void* Buffer = 0;
	unsigned long Context = 0;
	WCHAR path[0x1000];
	int ret = 0;

	while (ret >= 0)
	{

		unsigned long ReturnLength = 0;
		ret = ZwQueryDirectoryObject(hDirectory, 0, 0, TRUE, FALSE, &Context, &ReturnLength);
		//	wprintf(L"%s ret: %X, Context: %X, ReturnLength: %X\r\n",Print_Level(LevelX),ret,Context,ReturnLength);




		if (ret == STATUS_BUFFER_TOO_SMALL)
		{
			BufSize = ReturnLength;
			Buffer = LocalAlloc(LMEM_ZEROINIT, BufSize);

			ret = ZwQueryDirectoryObject(hDirectory, Buffer, BufSize, TRUE, FALSE, &Context, &ReturnLength);


			//	wprintf(L"%s ret: %X, Context: %X, ReturnLength: %X\r\n",Print_Level(LevelX),ret,Context,ReturnLength);

			_UNICODE_STRING* pUni = (_UNICODE_STRING*)Buffer;

			char* StartBuffer = (char*)Buffer;
			char* EndBuffer = ((char*)Buffer) + ReturnLength;

			char* Cur = (char*)pUni;

			char* Str1 = (char*)(pUni->Buffer);
			unsigned long Len1 = pUni->MaxLength;


			char* Str2 = (char*)((pUni + 1)->Buffer);
			unsigned long Len2 = (pUni + 1)->MaxLength;

			if ((Cur >= StartBuffer) && (Cur + (sizeof(_UNICODE_STRING) * 2) <= EndBuffer) /*At least two _UNICODE_STRING structures*/
				&&
				(Str1 >= StartBuffer) && (Str1 + Len1 <= EndBuffer)
				&&
				(Str2 >= StartBuffer) && (Str2 + Len2 <= EndBuffer))
			{
				wchar_t* Name = 0, * Type = 0;
				if (pUni->Length != 0 && pUni->MaxLength != 0 && pUni->Buffer != 0) Name = pUni->Buffer;
				pUni++;
				if (pUni->Length != 0 && pUni->MaxLength != 0 && pUni->Buffer != 0) Type = pUni->Buffer;
				wchar_t FullObjName[MAX_PATH + 1] = { 0 };
				if (Name && Type && !_wcsicmp(Type, L"Device"))
				{
					WCHAR dir[0x1000];
					memset(dir, 0, 0X1000);
					wcscat(dir, L"\\\\.\\GLOBALROOT");
					wcscat(dir, Dir_S2);
					wcscat(dir, L"\\");
					wcscat(dir, Name);
					dir[wcslen(dir)] = L'\0';
					//	printf("%S\n", dir);

					if (ImpersonateLoggedOnUser(hToken))
					{
						HANDLE hDriver = CreateFileW(dir, MAXIMUM_ALLOWED, 0, NULL, OPEN_EXISTING, 0, NULL);

						if (hDriver != INVALID_HANDLE_VALUE) {
							printf("%S\n", dir);
						}
						else if (GetLastError() > 5 && GetLastError() != 31)
						{
							printf("%S   需要进一步分析，错误值%d\n", dir, GetLastError());
						}
						RevertToSelf();
					}

					memset(dir, 0, 0X1000);

				}

				if (!_wcsicmp(Type, L"Directory"))
				{
					_UNICODE_STRING UNI_S = { 0 };

					wchar_t* Dir_S = Name;


					UNI_S.Length = wcslen(Dir_S) * 2;
					UNI_S.MaxLength = UNI_S.Length + 2;
					UNI_S.Buffer = Dir_S;

					_OBJECT_ATTRIBUTES ObjAttr_S = { sizeof(ObjAttr_S) };
					ObjAttr_S.RootDirectory = hDirectory;
					ObjAttr_S.ObjectName = &UNI_S;
					ObjAttr_S.Attributes = 0x40;

					HANDLE hDir_S = 0;

					int ret_S = ZwOpenDirectoryObject(&hDir_S, 0x20001, &ObjAttr_S);
					if (ret_S < 0)
					{
					}
					else
					{

						Dir_S3 = Dir_S2;
						z = wcslen(Dir_S2);
						wcscpy(path, Dir_S2);

						wcscat(Dir_S2, L"\\");
						wcscat(Dir_S2, Name);
						Buffer2 = Name;
						//	printf("%S\n", Dir_S2);
						int R = Recur(hDir_S, Dir_S2);
						memset(Dir_S2, 0, 0x1000);
						wcscat(Dir_S2, path);
						memset(path, 0, 0x1000);
						ZwClose(hDir_S);
					}
				}

			}
		}
		else
		{

			wcscpy(Dir_S2, Dir_S3);
			Dir_S2[z] = L'\0';

		}

	}
	return 0;
}
int ShowProcessIntegrityLevel(int pid)
{

	HANDLE hProcess;

	DWORD dwLengthNeeded;
	DWORD dwError = ERROR_SUCCESS;

	PTOKEN_MANDATORY_LABEL pTIL = NULL;
	LPWSTR pStringSid;
	DWORD dwIntegrityLevel;

	if (OpenProcessToken(OpenProcess(MAXIMUM_ALLOWED, 0, pid), MAXIMUM_ALLOWED, &hToken))
	{
		// Get the Integrity level.
		if (!GetTokenInformation(hToken, TokenIntegrityLevel,
			NULL, 0, &dwLengthNeeded))
		{
			dwError = GetLastError();
			if (dwError == ERROR_INSUFFICIENT_BUFFER)
			{
				pTIL = (PTOKEN_MANDATORY_LABEL)LocalAlloc(0,
					dwLengthNeeded);
				if (pTIL != NULL)
				{
					if (GetTokenInformation(hToken, TokenIntegrityLevel,
						pTIL, dwLengthNeeded, &dwLengthNeeded))
					{
						dwIntegrityLevel = *GetSidSubAuthority(pTIL->Label.Sid,
							(DWORD)(UCHAR)(*GetSidSubAuthorityCount(pTIL->Label.Sid) - 1));

						if (dwIntegrityLevel < SECURITY_MANDATORY_MEDIUM_RID)
						{
							// Low Integrity
							//wprintf(L"Low Process");
						}
						else if (dwIntegrityLevel >= SECURITY_MANDATORY_MEDIUM_RID &&
							dwIntegrityLevel < SECURITY_MANDATORY_HIGH_RID)
						{
							// Medium Integrity
							//wprintf(L"Medium Process");

							if (ImpersonateLoggedOnUser(hToken))
							{
								RevertToSelf();
								return 1;
							}
						}
						else if (dwIntegrityLevel >= SECURITY_MANDATORY_HIGH_RID)
						{
							// High Integrity
							//wprintf(L"High Integrity Process");
						}
					}
					LocalFree(pTIL);
				}
			}
		}
		CloseHandle(hToken);
	}
	return 0;
}


int main()
{
	//获取一个medium进程的token 当调用createfile再模拟
	for (size_t i = 0; i < 12345; i++)
	{
		if (ShowProcessIntegrityLevel(i))
		{
			break;
		}
	}
	_UNICODE_STRING UNI = { 0 };
	wchar_t* Dir = (WCHAR*)L"\\";
	UNI.Length = wcslen(Dir) * 2;
	UNI.MaxLength = UNI.Length + 2;
	UNI.Buffer = Dir;

	_OBJECT_ATTRIBUTES ObjAttr = { sizeof(ObjAttr) };
	ObjAttr.ObjectName = &UNI;
	ObjAttr.Attributes = 0x40;

	HANDLE hDir = 0;
	int ret = ZwOpenDirectoryObject(&hDir, 0x20001, &ObjAttr);
	wprintf(L"ZwOpenDirectoryObject, ret: %X, HANDLE: %X\r\n", ret, hDir);

	if (ret >= 0)
	{
		Recur(hDir, UNI.Buffer);
		ZwClose(hDir);
	}
	char* buf = (char*)malloc(0xffffff);
	char path[MAX_PATH] = { 0 };
	HANDLE hDriver = NULL;
	memset(buf, 0, 0xffffff);

	QueryDosDeviceA(NULL, buf, 0xffffff);
	ImpersonateLoggedOnUser(hToken);
	for (size_t i = 0; i < 0xffffff; i++)
	{
		if (buf[i] == 0 && buf[i + 1] != 0)
		{
			memcpy_s(path, MAX_PATH, "\\\\.\\", MAX_PATH);
			char* test = &buf[i + 1];
			strcat_s(path, test);

			hDriver = CreateFileA(path, MAXIMUM_ALLOWED, 0, NULL, OPEN_EXISTING, 0, NULL);

			if (hDriver != INVALID_HANDLE_VALUE) {
				printf("%s\n", path);
			}
			else if (GetLastError() > 5 && GetLastError() != 31)
			{
				printf("%s   需要进一步分析，错误值%d\n", path, GetLastError());
			}
			memset(path, 0, MAX_PATH);
		}
	}

	RevertToSelf();


	return 0;
}


