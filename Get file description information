//微软发布的补丁大多数标题名和漏洞文件的说明名相关 此程序则是遍历文件说明，如果匹配则打印文件名以及修改时间
//如果结果特别多那么一个好的处理方式是 cmd 这个exe名 >>1.TXT 安装补丁后 这个exe名 >>2.TXT  之后再对比1.txt和2.txt文件内容
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <locale.h>
#include <atlstr.h>
#include "windows.h"
#include <Strsafe.h>
using namespace std;
#pragma warning(disable:4996)
#pragma comment(lib, "version")


bool QueryValue(CHAR* ValueName, CHAR* szModuleName, CHAR*info)
{
	bool bSuccess = FALSE;
	BYTE* m_lpVersionData = NULL;
	DWORD   m_dwLangCharset = 0;
	CHAR* tmpstr = NULL;

	do
	{

		DWORD dwHandle;
		// 判断系统能否检索到指定文件的版本信息
		DWORD dwDataSize = ::GetFileVersionInfoSizeA(szModuleName, &dwHandle);
		if (dwDataSize == 0)
			break;

		m_lpVersionData = new (std::nothrow) BYTE[dwDataSize];// 分配缓冲区
		if (NULL == m_lpVersionData)
			break;
		// 检索信息
		if (!::GetFileVersionInfoA(szModuleName, dwHandle, dwDataSize,
			(void*)m_lpVersionData))
			break;

		UINT nQuerySize;
		DWORD* pTransTable;
		// 设置语言
		if (!::VerQueryValueA(m_lpVersionData, "\\VarFileInfo\\Translation", (void**)&pTransTable, &nQuerySize))
			break;

		m_dwLangCharset = MAKELONG(HIWORD(pTransTable[0]), LOWORD(pTransTable[0]));
		if (m_lpVersionData == NULL)
			break;

		tmpstr = new (std::nothrow) CHAR[128];// 分配缓冲区
		if (NULL == tmpstr)
			break;
		sprintf_s(tmpstr, 128, "\\StringFileInfo\\%08lx\\%s", m_dwLangCharset, ValueName);
		LPVOID lpData;

		// 调用此函数查询前需要先依次调用函数GetFileVersionInfoSize和GetFileVersionInfo
		if (::VerQueryValueA((void*)m_lpVersionData, tmpstr, &lpData, &nQuerySize))
		{
			if (strstr((const char*)lpData, (const char*)info)!=0)
			{
				return 1;
			}
		}
		

		bSuccess = TRUE;
	} while (FALSE);

	// 销毁缓冲区
	if (m_lpVersionData)
	{
		delete[] m_lpVersionData;
		m_lpVersionData = NULL;
	}
	if (tmpstr)
	{
		delete[] tmpstr;
		tmpstr = NULL;
	}

	return 0;
}


//传入要遍历的文件夹路径，并遍历相应文件夹
void TraverseDirectory(CHAR Dir[MAX_PATH], CHAR* info)
{
	WIN32_FIND_DATAA FindFileData;
	HANDLE hFind = INVALID_HANDLE_VALUE;
	CHAR DirSpec[MAX_PATH];                  //定义要遍历的文件夹的目录
	DWORD dwError;
	StringCchCopyA(DirSpec, MAX_PATH, Dir);
	StringCchCatA(DirSpec, MAX_PATH, ("\\*"));   //定义要遍历的文件夹的完整路径\*

	hFind = FindFirstFileA(DirSpec, &FindFileData);          //找到文件夹中的第一个文件

	if (hFind == INVALID_HANDLE_VALUE)                               //如果hFind句柄创建失败，输出错误信息
	{
		FindClose(hFind);
		return;
	}
	else
	{
		while (FindNextFileA(hFind, &FindFileData) != 0)                            //当文件或者文件夹存在时
		{
			if ((FindFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) != 0 && strcmp(FindFileData.cFileName, ".") == 0 || strcmp(FindFileData.cFileName, "..") == 0)        //判断是文件夹&&表示为"."||表示为"."
			{
				continue;
			}
			if ((FindFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) != 0)      //判断如果是文件夹
			{
				char DirAdd[MAX_PATH];
				StringCchCopyA(DirAdd, MAX_PATH, Dir);
				StringCchCatA(DirAdd, MAX_PATH, "\\");
				StringCchCatA(DirAdd, MAX_PATH, FindFileData.cFileName);       //拼接得到此文件夹的完整路径
				TraverseDirectory(DirAdd, info);                                  //实现递归调用
			}
			if ((FindFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) == 0)    //如果不是文件夹
			{

				CHAR p[1000] = { 0 };
				strcpy(p, Dir);
				strcat(p, "\\");
				strcat(p, FindFileData.cFileName);
				if (QueryValue((CHAR*)"FileDescription", p, info))
				{
					HANDLE pFile = CreateFileA(p, GENERIC_READ,
						FILE_SHARE_READ | FILE_SHARE_WRITE| FILE_SHARE_DELETE,
						NULL,
						OPEN_EXISTING,
						FILE_ATTRIBUTE_NORMAL,
						NULL);
					if (pFile == (HANDLE)-1)
					{
						continue;
					}

					FILETIME fCreateTime, fAccessTime, fWriteTime, localTime;
					GetFileTime(pFile, &fCreateTime, &fAccessTime, &fWriteTime);

					SYSTEMTIME sysTime;
					FileTimeToLocalFileTime(&fWriteTime, &localTime);
					FileTimeToSystemTime(&localTime, &sysTime);

					CString strTime;

					printf("%s   修改时间%4d年%2d月%2d日\n", p, sysTime.wYear, sysTime.wMonth, sysTime.wDay);
				}
				memset(p, 0, 1000);

			}
		}
		FindClose(hFind);
	}
}

int main() {

	//传入一个文件路径名，一个文件信息名，如果遍历的文件中文件说明有匹配的则打印
	TraverseDirectory((char*)"C:\\Windows",(char*)"Digital Media");

	return 0;
}
