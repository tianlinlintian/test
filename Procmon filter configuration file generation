//我解析了pmc文件格式 本程序会将HKLM\\SYSTEM\\ControlSet001\\services能创建注册表符号链接的项打印并生成pmc文件直接可以由Procmon导入
//省去了不用手动一个个点击配置的麻烦

#include <stdio.h>
#include <windows.h>
#include <string.h>
#include <Aclapi.h>

#pragma comment(lib, "ntdll")
#pragma comment (lib,"Advapi32.lib")

#pragma warning(disable:4996)


unsigned char data5[51] = {
	0x33, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
	0x48, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00,
	0x74, 0x00, 0x52, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x00
};

unsigned char data[1478] = {
	0xA0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
	0x43, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x00, 0x00,
	0x32, 0x00, 0x64, 0x00, 0x28, 0x00, 0x64, 0x00, 0x9D, 0x01, 0x64, 0x00, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x2C, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
	0x43, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x6F, 0x00,
	0x75, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x24, 0x01, 0x00, 0x00,
	0x10, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x43, 0x00, 0x6F, 0x00,
	0x6C, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x6E, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x70, 0x00, 0x00, 0x00,
	0x8E, 0x9C, 0x00, 0x00, 0x75, 0x9C, 0x00, 0x00, 0x76, 0x9C, 0x00, 0x00, 0x77, 0x9C, 0x00, 0x00,
	0x87, 0x9C, 0x00, 0x00, 0x78, 0x9C, 0x00, 0x00, 0x79, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x66, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,
	0x44, 0x00, 0x62, 0x00, 0x67, 0x00, 0x48, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x70, 0x00, 0x50, 0x00,
	0x61, 0x00, 0x74, 0x00, 0x68, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x57, 0x00,
	0x69, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x73, 0x00,
	0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x33, 0x00, 0x32, 0x00, 0x5C, 0x00,
	0x64, 0x00, 0x62, 0x00, 0x67, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x70, 0x00, 0x2E, 0x00,
	0x64, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x66, 0x00, 0x69, 0x00,
	0x6C, 0x00, 0x65, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x28, 0x00,
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x6C, 0x00,
	0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x46, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x04, 0x00,
	0x00, 0x00, 0x48, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x67, 0x00,
	0x68, 0x00, 0x74, 0x00, 0x42, 0x00, 0x47, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0x00, 0x7C, 0x00,
	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x4C, 0x00,
	0x6F, 0x00, 0x67, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x00, 0x00, 0x08, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x00, 0x53, 0x00, 0x69, 0x00, 0x6D, 0x00,
	0x53, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x44, 0x00, 0x6C, 0x00,
	0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x6F, 0x00,
	0x6F, 0x00, 0x6B, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x72, 0x00, 0x6B, 0x00, 0x46, 0x00, 0x6F, 0x00,
	0x6E, 0x00, 0x74, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00,
	0x00, 0x00, 0x53, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x53, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x00, 0x00,
	0x6C, 0x00, 0x20, 0x00, 0x44, 0x00, 0x6C, 0x00, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x04, 0x00,
	0x00, 0x00, 0x41, 0x00, 0x64, 0x00, 0x76, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x63, 0x00, 0x65, 0x00,
	0x64, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x2A, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
	0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00,
	0x6C, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x69, 0x00, 0x73, 0x00,
	0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x79, 0x00, 0x44, 0x00, 0x65, 0x00, 0x70, 0x00, 0x74, 0x00,
	0x68, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
	0x24, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x66, 0x00,
	0x69, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x38, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
	0x44, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x75, 0x00, 0x63, 0x00, 0x74, 0x00,
	0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x65, 0x00,
	0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
	0x28, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x77, 0x00, 0x61, 0x00,
	0x79, 0x00, 0x73, 0x00, 0x4F, 0x00, 0x6E, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,
	0x04, 0x00, 0x00, 0x00, 0x52, 0x00, 0x65, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x76, 0x00,
	0x65, 0x00, 0x41, 0x00, 0x64, 0x00, 0x64, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00,
	0x65, 0x00, 0x73, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x00, 0x6F, 0x00, 0x75, 0x00,
	0x72, 0x00, 0x63, 0x00, 0x65, 0x00, 0x50, 0x00, 0x61, 0x00, 0x74, 0x00, 0x68, 0x00, 0x00, 0x00,
	0x86, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
	0x53, 0x00, 0x79, 0x00, 0x6D, 0x00, 0x62, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x50, 0x00, 0x61, 0x00,
	0x74, 0x00, 0x68, 0x00, 0x00, 0x00, 0x73, 0x00, 0x72, 0x00, 0x76, 0x00, 0x2A, 0x00, 0x68, 0x00,
	0x74, 0x00, 0x74, 0x00, 0x70, 0x00, 0x73, 0x00, 0x3A, 0x00, 0x2F, 0x00, 0x2F, 0x00, 0x6D, 0x00,
	0x73, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x2E, 0x00, 0x6D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00,
	0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00,
	0x6D, 0x00, 0x2F, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x6C, 0x00, 0x6F, 0x00,
	0x61, 0x00, 0x64, 0x00, 0x2F, 0x00, 0x73, 0x00, 0x79, 0x00, 0x6D, 0x00, 0x62, 0x00, 0x6F, 0x00,
	0x6C, 0x00, 0x73, 0x00, 0x00, 0x00
};

unsigned char data6[25] = {
	0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x52, 0x00, 0x75, 0x00,
	0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x00, 0x00, 0x01
};

unsigned char data3[9] = {
	0x87, 0x9C, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01
};

unsigned char data9[8] = {
	0x10, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00
};
DWORD GetRegKeyCount(HKEY hKey, DWORD dwIndex, TCHAR* achKey, DWORD dwKeyLen)
{
    LONG   lRet = ERROR_SUCCESS;
    DWORD  cSubKeys = 0;
    DWORD  cMaxKeyLens = 0;

    lRet = RegQueryInfoKeyW(hKey, NULL, NULL, NULL, &cSubKeys, &cMaxKeyLens, NULL, NULL, NULL, NULL, NULL, NULL);
    if (lRet != ERROR_SUCCESS)
    {
        return 0;
    }

    if (cSubKeys != 0 && achKey != NULL)
    {
        lRet = RegEnumKeyExW(
            hKey,
            dwIndex,
            achKey,
            &dwKeyLen,
            NULL,
            NULL,
            NULL,
            NULL
        );
        if (lRet != ERROR_SUCCESS)
        {
            return 0;
        }
    }
    return cSubKeys;
}

char* data2;
char* data7;
ULONG datasize2;
ULONG datasize3;
ULONG num;

void SearchKey(HKEY hKey, LPCTSTR lpSubKey, LPCTSTR lpSubKey2, DWORD ACCESS)
{
    HKEY hSubKey = NULL;
    HKEY hSubKey2 = NULL;
    WCHAR subKeyName[MAX_PATH + 1] = { 0 };
    WCHAR subKeyName2[MAX_PATH + 1] = { 0 };


    if (ERROR_SUCCESS == RegOpenKeyExW(hKey, lpSubKey, 0, MAXIMUM_ALLOWED, &hSubKey))
    {
        //获取lpSubKey下面有多少个子项
        DWORD dwSubKey = GetRegKeyCount(hSubKey, 0, NULL, 0);

        for (int i = 0; i < dwSubKey; i++)
        {
            if (ERROR_SUCCESS == RegEnumKeyW(hSubKey, i, subKeyName, MAX_PATH))
            {
                wcscat(subKeyName2, lpSubKey2);
                wcscat(subKeyName2, L"\\");
                wcscat(subKeyName2, subKeyName);
                if (ERROR_SUCCESS==RegOpenKeyExW(hSubKey, subKeyName,
                    NULL, ACCESS, &hSubKey2))
                {
					ULONG datasize = sizeof(data3) + 4 + (wcslen(L"HKLM\\") * 2) + (wcslen(subKeyName2) * 2) + 0xA;
					datasize2 += datasize;
					ULONG datasize2 = (wcslen(L"HKLM\\") * 2) + (wcslen(subKeyName2) * 2) +2;
					memcpy(data7 , data3,sizeof(data3));
					memcpy(data7 + sizeof(data3), &datasize2, 4);
					memcpy(data7 + sizeof(data3) + 4, L"HKLM\\", wcslen(L"HKLM\\") * 2);
					memcpy(data7 + sizeof(data3) + 4 + wcslen(L"HKLM\\") * 2, subKeyName2, wcslen(subKeyName2)*2);

					memset(data7 + sizeof(data3) + 4 + (wcslen(L"HKLM\\") * 2) + (wcslen(subKeyName2) * 2), 0, 0xA);

					data7 += datasize;
					num++;
                    printf("HKLM\\%S\n", subKeyName2);
                }
                SearchKey(hSubKey, subKeyName, subKeyName2, ACCESS);
            }
            memset(subKeyName2, 0, MAX_PATH + 1);
        }
        //关闭
        if (hSubKey)
        {
            RegCloseKey(hSubKey);
        }
    }
}

int main() {

	
	data2 = (char*)malloc(0x1000000);
	data7 = (char*)malloc(0x1000000);
	ULONG data8 = (ULONG)data7;

	ULONG size1, size2 = 0;

    WCHAR path[0x1000] = L"SYSTEM\\ControlSet001\\services";

    SearchKey(HKEY_LOCAL_MACHINE, path, path, KEY_CREATE_LINK);

	datasize3 = datasize2 - 0x28;

	memcpy(data2, data, 0x5C6);


	datasize2 += 0x2d;
	memcpy(data2 + 0x5C6, &datasize2, 4);
	datasize2 -= 0x2d;
	printf("%x", datasize2);

	memcpy(data2 + 0x5C6 +4, data9, sizeof(data9));

	datasize3 += 0x2d;

	memcpy(data2 + 0x5C6 + 4 + sizeof(data9), &datasize3, 4);


	memcpy(data2 + 0x5C6 + 4 + sizeof(data9) + 4 , data6, sizeof(data6));

	memcpy(data2 + 0x5C6 + 4 + sizeof(data6) + sizeof(data9) + 4, &num, 4);

	memcpy(data2 + 0x5C6 + 4 + sizeof(data6) + 4 + sizeof(data9) + 4, (PVOID)data8, datasize2);

	memcpy(data2 + 0x5C6 + 4 + sizeof(data6) + 4 + datasize2 + sizeof(data9) + 4, data5, sizeof(data5));


	HANDLE hFILE = CreateFileA("1.pmc", GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);

	DWORD dwWrite=0;

	WriteFile(hFILE, (PVOID)data2, 0x5C6 + 4 + sizeof(data6) + 4 + datasize2 + sizeof(data9) + 4 + sizeof(data5), &dwWrite, NULL);
	
	CloseHandle(hFILE);


    return 0;
}
