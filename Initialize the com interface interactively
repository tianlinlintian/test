//获取能访问的交互式clsid

//遍历 Windows PowerShell命令 
//cd OleViewDotNet.exe目录
//set-executionpolicy remotesigned
//Import-Module .\OleViewDotNet.psd1
//Get-ComClass -InteractiveUser | Select-ComAccess | Select CLsid >>1.txt


//此代码是获得交互式com接口的示例,并且在遍历刚才获得得到的结果基础上再次实例化接口 并打印能实例化成功的clsid
//运行时，需要确保有另一个正在登陆的用户


#include <stdio.h>
#include <windows.h>
#include <hstring.h>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <string>
#include <string.h>
#include <windows.h>
#include <strsafe.h>
#include <tlhelp32.h>
#pragma warning(disable:4996)

using namespace std;

UUID clsid;

FILE* fp;

char str[0x1000];

size_t i = 0;
size_t f = 0;
size_t flag = 0;
int num = 0;;
IUnknown* p;


void th() {

    WCHAR buf[0x1000];
    WCHAR buf2[0x1000];
    WCHAR buf3[0x1000];

    IBindCtx* pbc;
    ULONG cEaten;
    LPMONIKER pmk;
    while (true)
    {
        size_t n = 0;
        for (; n < 10; n++)
        {
            Sleep(1000);
            if (f)
            {
                break;
            }
        }
        if (n == 10)
        {
            printf("上面的接口初始化接口时等待时间过长\n");
            for (; i < num; i++)
            {
                fgets(str, 0x1000, fp);

                for (size_t j = 0; j < 0x48; j++)
                {
                    if (str[j])
                    {
                        buf[j / 2] = str[j];
                    }
                }
                HRESULT hr = CreateBindCtx(NULL, &pbc);

                if (S_OK == hr) {
                    //2替换成另一个登陆的用户会话代表数字
                    wcscat(buf3, L"session:2!new:");
                    memcpy(&buf2, buf, 0x48);

                    buf2[0x24] = L'\0';
                    memcpy(buf3 + 14, buf2, 0x48);

                    hr = MkParseDisplayName(pbc, buf3, &cEaten, &pmk);
                    if (S_OK == hr) {
                        f = 0;
                        hr = pmk->BindToObject(pbc, 0, __uuidof(p), (LPVOID*)&p);
                        if (S_OK == hr) {
                            printf("%S\n", buf3);
                        }
                        f = 1;
                    }
                    memset(buf3, 0, 0x1000);
                    memset(buf2, 0, 0x1000);
                    memset(buf, 0, 0x1000);
                }
            }
            printf("运行完毕\n");
            memset(buf3, 0, 0x1000);
            memset(buf2, 0, 0x1000);
            memset(buf, 0, 0x1000);
        }
    }
}

int main(int argc, char* argv[]) {
    WCHAR buf[0x1000];
    WCHAR buf2[0x1000];
    IBindCtx* pbc;
    ULONG cEaten;
    LPMONIKER pmk;


    if ((fp = fopen("1.txt", "r")) == NULL) {
        puts("Fail to open file!");
        exit(0);
    }

    while (!feof(fp))
    {
        flag = fgetc(fp);
        if (flag == '\n')
            num++;
    }
    num -= 2;
    fseek(fp, 0, SEEK_SET);
    CoInitializeEx(NULL, COINIT_MULTITHREADED);


    printf("支持多线程套件的clsid \n");

    WCHAR buf3[0X1000];

 
    CreateThread(0, 0, (LPTHREAD_START_ROUTINE)th, 0, 0, 0);
    for (; i < num; i++)
    {
        fgets(str, 0x1000, fp);

        for (size_t j = 0; j < 0x48; j++)
        {
            if (str[j])
            {
                buf[j / 2] = str[j];
            }
        }
        
        HRESULT hr = CreateBindCtx(NULL, &pbc);
        if (S_OK == hr) {
            //2替换成另一个登陆的用户会话代表数字
            wcscat(buf3, L"session:2!new:");
            memcpy(&buf2, buf, 0x48);

            buf2[0x24] = L'\0';
            memcpy(buf3 + 14, buf2, 0x48);

            hr = MkParseDisplayName(pbc, buf3, &cEaten, &pmk);
            if (S_OK == hr) {
                f = 0;
                hr = pmk->BindToObject(pbc, 0, __uuidof(p), (LPVOID*)&p);
                if (S_OK == hr) {
                    printf("%S\n", buf3);
                }
                f = 1;
            }
            memset(buf3, 0, 0x1000);
            memset(buf2, 0, 0x1000);
            memset(buf, 0, 0x1000);
        }
    }

    printf("运行完毕\n");

    getchar();
    return 0;
}

