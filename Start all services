#include <iostream>
#include <Windows.h>
using namespace std;
//启动所有服务

int main(int argc, char** argv)
{
    SC_HANDLE hScm = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
    if (NULL == hScm)
    {
        return -1;
    }

    DWORD dwSize = 0;
    DWORD dwServiceNum = 0;
    EnumServicesStatusExA(hScm, SC_ENUM_PROCESS_INFO, SERVICE_WIN32, SERVICE_STATE_ALL,
        NULL, 0, &dwSize, &dwServiceNum, NULL, NULL);

    LPENUM_SERVICE_STATUS_PROCESSA pcBuff = NULL;
    pcBuff = (LPENUM_SERVICE_STATUS_PROCESSA)malloc(dwSize);
    memset(pcBuff, 0, dwSize);

    EnumServicesStatusExA(hScm, SC_ENUM_PROCESS_INFO, SERVICE_WIN32, SERVICE_STATE_ALL,
        (LPBYTE)pcBuff, dwSize, &dwSize, &dwServiceNum, NULL, NULL);
    char path[0x1000];
    char path2[0x1000];


    for (DWORD i = 0; i < dwServiceNum; i++)
    {
        // cout << pcBuff[i].lpServiceName << endl << pcBuff[i].lpDisplayName << endl << pcBuff[i].ServiceStatusProcess.dwCurrentState << endl;
        strcpy_s(path, "sc config ");
        memcpy(path + strlen("sc config "), pcBuff[i].lpServiceName, strlen(pcBuff[i].lpServiceName));
        memcpy(path + strlen("sc config ") + strlen(pcBuff[i].lpServiceName), " start= auto", strlen(" start= auto"));

        printf("%s\n", path);
        system(path);
        memcpy(path2, "sc start ", strlen("sc start "));
        memcpy(path2 + strlen("sc start "), pcBuff[i].lpServiceName, strlen(pcBuff[i].lpServiceName));
     
        system(path2);

        memset(path, 0, 0x1000);
        memset(path2, 0, 0x1000);

    }

    getchar();

    CloseServiceHandle(hScm);
    return 0;
