//该代码遍历具有appid的clsid 并在调用CoCreateInstance之后打印能获得实例的clsid （以当前进程权限）

#include <stdio.h>
#include <windows.h>
#include <hstring.h>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <string>
#include <string.h>
#include <windows.h>
#include <strsafe.h>
#include <tlhelp32.h>

#pragma warning(disable:4996)

using namespace std;


IUnknown* p;

UUID clsid;

FILE* fp;

int z = 0;
size_t i = 0;
size_t f = 0;
size_t flag = 0;
int num = 0;;

void th() {
    char str[0x1000];
    WCHAR buf[0x1000];
    WCHAR buf2[0x1000];
    while (true)
    {
        size_t n = 0;
        for (; n < 10; n++)
        {
            Sleep(1000);
            if (f)
            {
                break;
            }
        }
        if (n == 10)
        {
            printf("%S 初始化接口时等待时间过长\n", buf2);
            for (; i < num; i++)
            {
                fgets(str, 0x1000, fp);

                for (size_t j = 0; j < 0x48; j++)
                {
                    if (str[j])
                    {
                        buf[j / 2] = str[j];
                    }
                }
                buf2[0] = L'{';

                memcpy(&buf2[1], buf, 0x48);
                buf2[0x25] = L'}';
                buf2[0x26] = L'\0';

                CLSIDFromString(buf2, &clsid);

                HANDLE hTargetHandle = 0;
                if (z<4)
                {
                    CreateThread(0, 0, (LPTHREAD_START_ROUTINE)th, 0, 0, 0);
                }
             
                z++;
                f = 0;
                HRESULT hr = CoCreateInstance(clsid, NULL, CLSCTX_LOCAL_SERVER, __uuidof(p), (LPVOID*)&p);

                f = 1;
                if (!hr)
                {
                    printf("%S\n", buf2);
                }
                memset(buf2, 0, 0x1000);
                memset(buf, 0, 0x1000);
            }
            printf("运行完毕\n");
        }
    }
}
int main(int argc, char* argv[]) {

    char str[0x1000];
    WCHAR buf[0x1000];
    WCHAR buf2[0x1000];
    if ((fp = fopen("1.txt", "r")) == NULL) {
        puts("Fail to open file!");
        exit(0);
    }

    while (!feof(fp))
    {
        flag = fgetc(fp);
        if (flag == '\n')
            num++;
    }
    num -= 2;
    fseek(fp, 0, SEEK_SET);
    CoInitializeEx(NULL, COINIT_MULTITHREADED);


    printf("支持多线程套件的clsid \n");


    CreateThread(0, 0, (LPTHREAD_START_ROUTINE)th, 0, 0, 0);

    for (; i < num; i++)
    {
        fgets(str, 0x1000, fp);

        for (size_t j = 0; j < 0x48; j++)
        {
            if (str[j])
            {
                buf[j / 2] = str[j];
            }
        }
        buf2[0] = L'{';

        memcpy(&buf2[1], buf, 0x48);
        buf2[0x25] = L'}';
        buf2[0x26] = L'\0';

        CLSIDFromString(buf2, &clsid);

        HANDLE hTargetHandle = 0;
        f = 0;
        HRESULT hr = CoCreateInstance(clsid, NULL, CLSCTX_LOCAL_SERVER, __uuidof(p), (LPVOID*)&p);

        f = 1;
        if (!hr)
        {
            printf("%S\n", buf2);
            memset(buf2, 0, 0x1000);
            memset(buf, 0, 0x1000);
        }

    }

    printf("运行完毕\n");
    getchar();
    return 0;
}
